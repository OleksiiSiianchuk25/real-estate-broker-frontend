// src/pages/PropertyDetailsPage.tsx
import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import {
  Container,
  Typography,
  Card,
  CardMedia,
  CardContent,
  CircularProgress,
  Alert,
  Box,
  Button,
  TextField,
  List,
  ListItem,
  ListItemText,
  Rating,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Divider,
} from "@mui/material";
import api from "../utils/api";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤ Leaflet
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

interface PropertyDTO {
  id: number;
  title: string;
  description: string;
  price: string;
  city: string;
  imageUrl: string;
  status: string;
  type: string;
  address: string;
  realtorId: number;
  realtorFullName: string;
  realtorPhone: string;
  realtorEmail: string;
  latitude: number;
  longitude: number;
}

interface ReviewDTO {
  id: number;
  author: string;
  rating: number;
  comment: string;
  createdAt: string;
}

// –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–µ–∫–µ–Ω–¥—É
interface RealtorRatingSummary {
  averageRating: number;
  totalRatings: number;
}

function SetViewOnMount({ coords }: { coords: [number, number] }) {
  const map = useMap();
  useEffect(() => {
    map.setView(coords, 13);
  }, [coords, map]);
  return null;
}

export default function PropertyDetailsPage() {
  const { id } = useParams<{ id: string }>();
  const [property, setProperty] = useState<PropertyDTO | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // –í—ñ–¥–≥—É–∫–∏ –ø–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
  const [reviews, setReviews] = useState<ReviewDTO[]>([]);
  const [reviewsLoading, setReviewsLoading] = useState(false);
  const [reviewsError, setReviewsError] = useState("");

  // –ù–æ–≤–∞ —Ñ–æ—Ä–º–∞ –≤—ñ–¥–≥—É–∫—É –ø–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
  const [newComment, setNewComment] = useState("");
  const [newRating, setNewRating] = useState<number | null>(null);

  // –†–µ–π—Ç–∏–Ω–≥ —Ä—ñ—î–ª—Ç–æ—Ä–∞
  const [summary, setSummary] = useState<RealtorRatingSummary | null>(null);
  const [summaryLoading, setSummaryLoading] = useState(false);
  const [summaryError, setSummaryError] = useState("");

  // –°—Ç–∞–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —Ä—ñ—î–ª—Ç–æ—Ä–∞
  const [openRealtorDialog, setOpenRealtorDialog] = useState(false);
  const [realtorComment, setRealtorComment] = useState("");
  const [realtorRating, setRealtorRating] = useState<number | null>(null);

  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    api
      .get("/users/profile")
      .then(() => setIsLoggedIn(true))
      .catch(() => setIsLoggedIn(false));
  }, []);

  // --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
  useEffect(() => {
    api
      .get<PropertyDTO>(`/properties/${id}`)
      .then((res) => setProperty(res.data))
      .catch(() => setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ"))
      .finally(() => setLoading(false));
  }, [id]);

  useEffect(() => {
    setReviewsLoading(true);
    api
      .get<ReviewDTO[]>(`/properties/${id}/reviews`)
      .then((res) => setReviews(res.data))
      .catch(() => setReviewsError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"))
      .finally(() => setReviewsLoading(false));
  }, [id]);

  useEffect(() => {
    if (!property) return;
    setSummaryLoading(true);
    api
      .get<RealtorRatingSummary>(
        `/realtors/${property.realtorId}/ratings/summary`
      )
      .then((res) => setSummary(res.data))
      .catch(() =>
        setSummaryError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Ä—ñ—î–ª—Ç–æ—Ä–∞")
      )
      .finally(() => setSummaryLoading(false));
  }, [property]);

  // --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
  const handleAddFavorite = async () => {
    try {
      await api.post("/favorites", { propertyId: property!.id });
      alert("–î–æ–¥–∞–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏");
    } catch {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –∑–∞–∫–ª–∞–¥–∫–∏");
    }
  };

  const handleAddReview = async () => {
    if (!newRating || !newComment.trim()) return;
    try {
      const res = await api.post<ReviewDTO>(
        `/properties/${id}/reviews`,
        { rating: newRating, comment: newComment }
      );
      setReviews((prev) => [res.data, ...prev]);
      setNewComment("");
      setNewRating(null);
    } catch {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É");
    }
  };

  const handleRealtorReview = async () => {
    if (!realtorRating || !realtorComment.trim() || !property) return;
    try {
      const res = await api.post<ReviewDTO>(
        `/realtors/${property.realtorId}/ratings`,
        { rating: realtorRating, comment: realtorComment }
      );
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π summary
      setSummary((prev) =>
        prev
          ? {
              averageRating:
                (prev.averageRating * prev.totalRatings + realtorRating) /
                (prev.totalRatings + 1),
              totalRatings: prev.totalRatings + 1,
            }
          : { averageRating: realtorRating, totalRatings: 1 }
      );
      setRealtorComment("");
      setRealtorRating(null);
      setOpenRealtorDialog(false);
    } catch {
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ü—ñ–Ω—Ü—ñ —Ä—ñ—î–ª—Ç–æ—Ä–∞");
    }
  };

  if (loading) return <CircularProgress />;
  if (error) return <Alert severity="error">{error}</Alert>;
  if (!property) return <Alert severity="warning">–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</Alert>;

  return (
    <Container sx={{ my: 4 }}>
      <Typography variant="h4" align="center" gutterBottom>
        {property.title}
      </Typography>

      {/* –ö–∞—Ä—Ç–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ */}
      <Card>
        <CardMedia
          component="img"
          height="400"
          image={property.imageUrl}
          alt={property.title}
        />
        <CardContent>
          {/* –û–ø–∏—Å */}
          <Typography variant="h6">–û–ø–∏—Å</Typography>
          <Typography>{property.description}</Typography>

          {/* –Ü–Ω—à—ñ –¥–∞–Ω—ñ */}
          <Typography variant="h6" mt={2}>
            –¶—ñ–Ω–∞
          </Typography>
          <Typography color="primary">
            {new Intl.NumberFormat("uk-UA", {
              style: "currency",
              currency: "UAH",
              minimumFractionDigits: 0,
            }).format(Number(property.price))}
          </Typography>

          <Typography variant="h6" mt={2}>
            –¢–∏–ø
          </Typography>
          <Typography>
            {property.type === "APARTMENT" ? "–ö–≤–∞—Ä—Ç–∏—Ä–∞" : "–ë—É–¥–∏–Ω–æ–∫"}
          </Typography>

          <Typography variant="h6" mt={2}>
            –°—Ç–∞—Ç—É—Å
          </Typography>
          <Typography>
            {property.status === "FOR_SALE"
              ? "–ü—Ä–æ–¥–∞—î—Ç—å—Å—è"
              : property.status === "FOR_RENT"
              ? "–û—Ä–µ–Ω–¥–∞"
              : "–ü—Ä–æ–¥–∞–Ω–æ"}
          </Typography>

          <Typography variant="h6" mt={2}>
            –ú—ñ—Å—Ç–æ / –ê–¥—Ä–µ—Å–∞
          </Typography>
          <Typography>
            {property.city}, {property.address}
          </Typography>

          {/* –ö–æ–Ω—Ç–∞–∫—Ç–∏ —ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—ñ—î–ª—Ç–æ—Ä–∞ */}
          <Box mt={2}>
            <Typography variant="h6">–†—ñ—î–ª—Ç–æ—Ä</Typography>
            <Box display="flex" gap={2} flexWrap="wrap" alignItems="center">
              <Button
                variant="outlined"
                component={Link}
                to={`/realtors/${property.realtorId}`}
                size="small"
              >
                –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —Ä—ñ—î–ª—Ç–æ—Ä–∞
              </Button>
              {isLoggedIn && (
                <Button
                  variant="contained"
                  size="small"
                  onClick={() => setOpenRealtorDialog(true)}
                >
                  –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
                </Button>
              )}
            </Box>
            <Box mt={1}>
              <Typography>{property.realtorFullName}</Typography>
              <Typography>üìû {property.realtorPhone}</Typography>
              <Typography>‚úâÔ∏è {property.realtorEmail}</Typography>
            </Box>
          </Box>

          {/* —Ä–µ–π—Ç–∏–Ω–≥ —Ä—ñ—î–ª—Ç–æ—Ä–∞ */}
          <Box mt={2}>
            <Typography variant="h6">–†–µ–π—Ç–∏–Ω–≥ —Ä—ñ—î–ª—Ç–æ—Ä–∞</Typography>
            {summaryLoading ? (
              <CircularProgress size={20} />
            ) : summaryError ? (
              <Alert severity="error">{summaryError}</Alert>
            ) : summary && summary.totalRatings > 0 ? (
              <Typography>
                {summary.averageRating.toFixed(1)} ‚òÖ ({summary.totalRatings})
              </Typography>
            ) : (
              <Typography>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫</Typography>
            )}
          </Box>
        </CardContent>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –∑–∞–ª–∏—à–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –ø—Ä–æ —Ä—ñ—î–ª—Ç–æ—Ä–∞ */}
      <Dialog
        open={openRealtorDialog}
        onClose={() => setOpenRealtorDialog(false)}
        fullWidth
        maxWidth="sm"
      >
        <DialogTitle>–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ —Ä—ñ—î–ª—Ç–æ—Ä–∞</DialogTitle>
        <DialogContent>
          <Box display="flex" flexDirection="column" gap={2} mt={1}>
            <Rating
              name="realtor-rating"
              value={realtorRating}
              onChange={(_, val) => setRealtorRating(val)}
              size="medium"
            />
            <TextField
              label="–ö–æ–º–µ–Ω—Ç–∞—Ä"
              multiline
              rows={3}
              value={realtorComment}
              onChange={(e) => setRealtorComment(e.target.value)}
              fullWidth
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenRealtorDialog(false)}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
          <Button
            variant="contained"
            disabled={!realtorRating || !realtorComment.trim()}
            onClick={handleRealtorReview}
          >
            –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ó–∞–∫–ª–∞–¥–∫–∏ */}
      <Button
        variant="contained"
        color="primary"
        onClick={handleAddFavorite}
        sx={{ mt: 2 }}
      >
        –î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ
      </Button>

      {/* –ö–∞—Ä—Ç–∞ */}
      <Box mt={3} sx={{ height: 400 }}>
        <Typography variant="h6" mb={1}>
          –õ–æ–∫–∞—Ü—ñ—è
        </Typography>
        <MapContainer
          center={[property.latitude, property.longitude]}
          zoom={13}
          style={{ height: "100%", width: "100%" }}
        >
          <SetViewOnMount coords={[property.latitude, property.longitude]} />
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          <Marker position={[property.latitude, property.longitude]}>
            <Popup>{property.title}</Popup>
          </Marker>
        </MapContainer>
      </Box>

      {/* –í—ñ–¥–≥—É–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ */}
      <Box mt={6}>
        <Typography variant="h5" gutterBottom>
          –í—ñ–¥–≥—É–∫–∏
        </Typography>

        {reviewsLoading ? (
          <CircularProgress size={24} />
        ) : reviewsError ? (
          <Alert severity="error">{reviewsError}</Alert>
        ) : (
          <List>
            {reviews.length === 0 && (
              <Typography>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.</Typography>
            )}
            {reviews.map((rev) => (
              <ListItem key={rev.id} alignItems="flex-start">
                <ListItemText
                  primary={
                    <Box display="flex" alignItems="center" gap={1}>
                      <Typography variant="subtitle2">
                        {rev.author}
                      </Typography>
                      <Rating value={rev.rating} size="small" readOnly />
                    </Box>
                  }
                  secondary={rev.comment}
                />
              </ListItem>
            ))}
          </List>
        )}

        {/* –§–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É */}
        {isLoggedIn ? (
          <Box mt={2} display="flex" flexDirection="column" gap={1}>
            <Typography>–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫:</Typography>
            <Rating
              name="property-review"
              value={newRating}
              onChange={(_, val) => setNewRating(val)}
            />
            <TextField
              label="–ö–æ–º–µ–Ω—Ç–∞—Ä"
              multiline
              rows={3}
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
            />
            <Button
              variant="contained"
              onClick={handleAddReview}
              disabled={!newRating || !newComment.trim()}
            >
              –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
            </Button>
          </Box>
        ) : (
          <Alert severity="info">
            –©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫, –±—É–¥—å –ª–∞—Å–∫–∞, <Link to="/login">—É–≤—ñ–π–¥—ñ—Ç—å</Link>.
          </Alert>
        )}
      </Box>
    </Container>
  );
}
